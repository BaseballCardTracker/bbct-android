apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'testdroid'

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.testdroid:gradle:1.3.0'
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
        maven {
            url "https://maven.google.com"
        }
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        applicationId "bbct.android.common"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 20
        versionName "0.6.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.enableCrashlytics = false
            debuggable true
        }
    }
    productFlavors {
        lite {
            applicationId "bbct.android"
        }
        premium {
            applicationId "bbct.android.premium"
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

testdroid {
    mode 'FULL_RUN'
    projectName 'BBCT Lite'

    fullRunConfig {
        instrumentationRunner = 'android.support.test.runner.AndroidJUnitRunner'
    }
}

def Properties props = new Properties()
def propFile = new File('bbct.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null) {
        if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD')
                && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'bbct.properties found but SIGNING entries are missing'
            android.buildTypes.release.signingConfig = null
        }

        if (props.containsKey('TESTDROID_USERNAME') && props.containsKey('TESTDROID_PASSWORD')) {
            testdroid.username = props['TESTDROID_USERNAME']
            testdroid.password = props['TESTDROID_PASSWORD']
        } else {
            println 'bbct.properties found but TESTDROID entries are missing'
        }

        if (props.containsKey('TESTDROID_PACKAGE')) {
            testdroid.fullRunConfig.limitationType = 'PACKAGE'
            testdroid.fullRunConfig.limitationValue = props['TESTDROID_PACKAGE']
            println 'Setting test package: ' + props['TESTDROID_PACKAGE']
        }

        if (props.containsKey('TESTDROID_CLASS')) {
            testdroid.fullRunConfig.limitationType = 'CLASS'
            testdroid.fullRunConfig.limitationValue = props['TESTDROID_CLASS']
            println 'Setting test class: ' + props['TESTDROID_CLASS']
        }

        if (props.containsKey('TESTDROID_DEVICE_GROUP')) {
            testdroid.deviceGroup = props['TESTDROID_DEVICE_GROUP']
        } else {
            println '\'deviceGroup\' not specified'
        }
    }
} else {
    println 'bbct.properties not found'
}

ext {
    supportLibVersion = '26.0.0'
    espressoVersion = '2.2.1'
    testSupportLibVersion = '0.5'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile 'com.google.android.gms:play-services:6.1.71'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile 'com.jakewharton:butterknife:5.1.2'
    compile project(':lib')

    androidTestCompile "com.android.support.test:runner:${testSupportLibVersion}"
    androidTestCompile "com.android.support.test:rules:${testSupportLibVersion}"
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"

    testCompile 'junit:junit:4.12'
}
